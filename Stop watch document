## Stopwatch Web Application Documentation

### Overview
This project creates a stopwatch web application using HTML, CSS, and JavaScript. It includes features like start, stop, reset, and lap time recording. The interface is styled for a modern look.

---

### 1. HTML Structure
The HTML file provides the structure of the stopwatch.

- **Display:** Shows the stopwatch time in hours, minutes, seconds, and milliseconds.
- **Buttons:**
  - **Start:** Starts the stopwatch.
  - **Stop:** Pauses the stopwatch.
  - **Reset:** Resets the stopwatch to zero.
  - **Lap:** Saves the current time as a lap.
- **Lap List:** Displays recorded lap times.

Example:
```html
<div class="stopwatch">
    <div id="display">00:00:00.000</div>
    <button class="start" onclick="startStopwatch()">Start</button>
    <button class="stop" onclick="stopStopwatch()">Stop</button>
    <button class="reset" onclick="resetStopwatch()">Reset</button>
    <button class="lap" onclick="saveLap()">Lap</button>
    <ul id="laps"></ul>
</div>
```

---

### 2. CSS Styling
The CSS file enhances the visual appearance of the stopwatch.

- **Body:** Gradient background with centered alignment.
- **Stopwatch Box:** Dark transparent background with rounded corners and shadow.
- **Display:** Large, glowing digital clock style.
- **Buttons:** Rounded buttons with hover effects.
- **Lap Button:** Square-shaped with a highlighted border.

Example:
```css
body {
    background: linear-gradient(135deg, #4c83ff, #9f66ff);
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    color: #fff;
}
```

---

### 3. JavaScript Functionality
JavaScript powers the stopwatch features.

- **Start Stopwatch:** Starts the timer using `setInterval()`.
- **Stop Stopwatch:** Pauses the timer by clearing the interval.
- **Reset Stopwatch:** Stops the timer and resets elapsed time.
- **Lap Recording:** Saves the current time as a lap and displays it.
- **Clock Effect:** Rotates the display slightly to simulate movement.

Key Function Example:
```javascript
function startStopwatch() {
    if (!running) {
        startTime = Date.now() - elapsedTime;
        timer = setInterval(() => {
            elapsedTime = Date.now() - startTime;
            updateDisplay(elapsedTime);
        }, 10);
        running = true;
    }
}
```

---

### 4. How to Run
1. Save the HTML, CSS, and JavaScript files in the same folder.
2. Open the HTML file in a web browser.
3. Use the buttons to start, stop, reset, and record lap times.

---

### 5. Conclusion
This stopwatch project demonstrates how HTML, CSS, and JavaScript work together to build an interactive web application. The user can track time, save laps, and enjoy a modern UI with smooth transitions.

